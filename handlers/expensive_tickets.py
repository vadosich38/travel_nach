from set_tg_bot.dispatcher import my_disp
from set_tg_bot.bot import my_bot
from states.states_class import BotStates
from processing.city_checker import check_city
from db_methods.db_class import DBMethods
from keyboards.cancel_kb import get_cancel_kb
from keyboards.menu_kb import get_menu_kb
from keyboards.confirm_ikb import get_confirm_ikb
from keyboards.return_ikb import get_return_ikb
from api_package.api_class import ApiMethods
from keyboards.dates_choose import get_month_ikb, get_date_ikb
from keyboards.period_choose import get_periods_ikb
from db_methods.connections import history_db_connect
from keyboards.tickets_ikb import get_small_tickets_ikb, get_tickets_ikb
from texts.texts import get_listing_text

from aiogram.dispatcher.filters import Text
from aiogram import types
from aiogram.dispatcher import FSMContext


@my_disp.message_handler(lambda message: message.text, Text(equals="‚úàÔ∏è –ù–∞–π—Ç–∏ –¥–æ—Ä–æ–≥–∏–µ –±–∏–ª–µ—Ç—ã ‚úàÔ∏è", ignore_case=False))
async def cmd_expensive_regim(message: types.Message):
    await message.reply(text="<b>–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –±–∏–ª–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–ª–µ—Ç–∞ üëÄ</b>\n\n"
                             "–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã –ª–µ—Ç–∏—Ç–µ? ‚úàÔ∏è",
                        parse_mode='HTML',
                        reply_markup=get_cancel_kb())
    await BotStates.expensive_from_city_wait.set()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_from_city_wait)
async def cmd_cancel_from_city_wait(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_from_city_confirm)
async def cmd_cancel_from_city_confirm(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_to_city_wait)
async def cmd_cancel_to_city_wait(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_to_city_confirm)
async def cmd_cancel_to_city_confirm(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_return)
async def cmd_cancel_return(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_start_period_month)
async def cmd_cancel_start_period_month(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_start_period_date)
async def cmd_cancel_start_period_date(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_period_choose)
async def cmd_cancel_period_choose(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text,
                         Text(equals="üí• –í–ï–†–ù–£–¢–°–¨–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üí•", ignore_case=False),
                         state=BotStates.expensive_tickets_review)
async def cmd_cancel_tickets_review(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_kb())
    await state.finish()


@my_disp.message_handler(lambda message: message.text, state=BotStates.expensive_from_city_wait)
async def from_city(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞"""
    check_res = check_city(city_name=message.text)

    async with state.proxy() as data:
        data["from_city"] = check_res[0]
        from_city_iata = DBMethods.get_city_iata(city_name=check_res[0], language=check_res[1])
        if from_city_iata:
            data["from_city_iata"] = from_city_iata[0]
            await my_bot.send_message(chat_id=message.from_user.id,
                                      text=f"\nüõ´ –í—ã –≤—ã–ª–µ—Ç–∞–µ—Ç–µ –∏–∑ –≥–æ—Ä–æ–¥–∞ <b>{data['from_city']}</b> üõ´"
                                           f"\n\n<b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –í–´–ë–û–† –ì–û–†–û–î–ê –í–´–õ–ï–¢–ê</b>",
                                      parse_mode="HTML",
                                      reply_markup=get_confirm_ikb())
            await BotStates.expensive_from_city_confirm.set()

        else:
            await message.reply(text="–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏–±–æ –≤ –Ω–µ–º –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üõü",
                                reply_markup=get_cancel_kb())


@my_disp.callback_query_handler(state=BotStates.expensive_from_city_confirm, text="confirm")
async def from_city_confirm(callback_data: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–ª–±–µ–∫ —Ö–µ–Ω–¥–ª–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞"""
    await callback_data.answer(text="–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞!")

    await my_bot.edit_message_text(chat_id=callback_data.from_user.id,
                                   message_id=callback_data.message.message_id,
                                   text="üåÄ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ª–µ—Ç–µ—Ç—å üåÄ")

    await BotStates.expensive_to_city_wait.set()


@my_disp.message_handler(lambda message: message.text, state=BotStates.expensive_to_city_wait)
async def to_city(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""

    check_res = check_city(city_name=message.text)
    async with state.proxy() as data:
        data["to_city"] = check_res[0]
        to_city_iata = DBMethods.get_city_iata(city_name=check_res[0], language=check_res[1])
        if to_city_iata:
            data["to_city_iata"] = to_city_iata[0]
            await my_bot.send_message(chat_id=message.from_user.id,
                                      text=f"\nüõ´ –í—ã –ª–µ—Ç–∏—Ç–µ –≤ –≥–æ—Ä–æ–¥ <b>{data['to_city']}</b> üõ´"
                                           f"\n\n<b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –í–´–ë–û–† –ì–û–†–û–î–ê –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø</b>",
                                      parse_mode="HTML",
                                      reply_markup=get_confirm_ikb())
            await BotStates.expensive_to_city_confirm.set()

        else:
            await message.reply(text="–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏–±–æ –≤ –Ω–µ–º –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üõü",
                                reply_markup=get_cancel_kb())


@my_disp.callback_query_handler(state=BotStates.expensive_to_city_confirm)
async def to_city_confirm(callback_data: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–ª–ª–±–µ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await callback_data.answer(text="–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞!")

    await my_bot.edit_message_text(chat_id=callback_data.from_user.id,
                                   message_id=callback_data.message.message_id,
                                   text="üåÄ –î–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –Ω–∞–π–¥–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã? üåÄ",
                                   reply_markup=get_return_ikb())

    await BotStates.expensive_return.set()


@my_disp.callback_query_handler(state=BotStates.expensive_return)
async def return_choose(callback_data: types.CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–ª–ª–±–µ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–±—Ä–∞—Ç–Ω–æ–º —Ä–µ–π—Å–µ"""

    async with state.proxy() as data:
        data["return"] = callback_data.data

    await callback_data.answer(text="–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")
    await my_bot.edit_message_text(chat_id=callback_data.from_user.id,
                                   message_id=callback_data.message.message_id,
                                   text="–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, –æ—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã",
                                   reply_markup=get_month_ikb())
    await BotStates.expensive_start_period_month.set()


@my_disp.callback_query_handler(state=BotStates.expensive_start_period_month)
async def get_start_month(callback_data: types.CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–ª–±–µ–∫ —Ö–µ–Ω–¥–ª–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤"""
    async with state.proxy() as data:
        data["start_date"] = callback_data.data

    await my_bot.edit_message_text(chat_id=callback_data.from_user.id,
                                   message_id=callback_data.message.message_id,
                                   text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É",
                                   reply_markup=get_date_ikb(month=data["start_date"][5:]))
    await BotStates.expensive_start_period_date.set()


@my_disp.callback_query_handler(state=BotStates.expensive_start_period_date)
async def get_start_date(callback_data: types.CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–ª–±–µ–∫ —Ö–µ–Ω–¥–ª–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤"""
    async with state.proxy() as data:
        data["start_date"] = f"{data['start_date']}-{callback_data.data}"

    await my_bot.edit_message_text(chat_id=callback_data.from_user.id,
                                   message_id=callback_data.message.message_id,
                                   text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, "
                                        "–≤ —Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–ª–µ—Ç–µ—Ç—å",
                                   reply_markup=get_periods_ikb())
    await BotStates.expensive_period_choose.set()


@my_disp.callback_query_handler(state=BotStates.expensive_period_choose)
async def get_period(callback_data: types.CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–ª–±–µ–∫ —Ö–µ–Ω–¥–ª–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    await callback_data.message.delete()

    async with state.proxy() as data:
        data["period"] = callback_data.data
        data["curr_ticket"] = 0

    tickets_bundle = ApiMethods.get_expensive_tickets(from_city=data["from_city_iata"],
                                                      to_city=data["to_city_iata"],
                                                      date=data["start_date"],
                                                      period=data["period"],
                                                      one_way=data["return"])
    async with state.proxy() as data:
        data["tickets_count"] = len(tickets_bundle)
        print("–ö–æ–ª–≤–æ –±–∏–ª–µ—Ç–æ–≤", data["tickets_count"])
        data["tickets_bundle"] = tickets_bundle

    if data["tickets_count"] > 1:
        await my_bot.send_message(chat_id=callback_data.from_user.id,
                                  text=get_listing_text(data=data,
                                                        tickets_bundle=tickets_bundle),
                                  parse_mode="HTML",
                                  reply_markup=get_tickets_ikb(link=tickets_bundle[data["curr_ticket"]]['gate']))

        result_text = "".join(str(tickets_bundle))
        await BotStates.expensive_tickets_review.set()
    elif data["tickets_count"] == 1:
        await my_bot.send_message(chat_id=callback_data.from_user.id,
                                  text=get_listing_text(data=data,
                                                        tickets_bundle=tickets_bundle),
                                  parse_mode="HTML",
                                  reply_markup=get_small_tickets_ikb(link=tickets_bundle[data["curr_ticket"]]['gate']))

        result_text = "".join(str(tickets_bundle))
        await BotStates.expensive_tickets_review.set()
    else:
        await my_bot.send_message(chat_id=callback_data.from_user.id,
                                  text="–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞ aviasales.com",
                                  reply_markup=get_menu_kb())

        result_text = None
        await state.finish()

    DBMethods.add_result(conn=history_db_connect, user_id=callback_data.from_user.id,
                         command_type="–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –±–∏–ª–µ—Ç—ã", city_from=data["from_city"], city_to=data["to_city"],
                         start_date=data["start_date"], period=data["period"], return_fly=data["return"],
                         results=result_text)


@my_disp.callback_query_handler(state=BotStates.expensive_tickets_review, text=">>")
async def expensive_next_ticket(callback_data: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data["curr_ticket"] + 1 > data["tickets_count"] - 1:
            data["curr_ticket"] = 0
        else:
            data["curr_ticket"] += 1

    await callback_data.answer(text="–°–ª–µ–¥—É—é—â–∏–π –±–∏–ª–µ—Ç!")
    await my_bot.edit_message_text(chat_id=callback_data.from_user.id,
                                   message_id=callback_data.message.message_id,
                                   text=get_listing_text(data=data,
                                                         tickets_bundle=data["tickets_bundle"]),
                                   parse_mode="HTML",
                                   reply_markup=get_tickets_ikb(
                                       link=data["tickets_bundle"][data["curr_ticket"]]['gate']))


@my_disp.callback_query_handler(state=BotStates.expensive_tickets_review, text="<<")
async def expensive_previous_ticket(callback_data: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data["curr_ticket"] - 1 < 0:
            data["curr_ticket"] = data["tickets_count"] - 1
        else:
            data["curr_ticket"] -= 1

    await callback_data.answer(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∏–ª–µ—Ç!")
    await my_bot.edit_message_text(chat_id=callback_data.from_user.id,
                                   message_id=callback_data.message.message_id,
                                   text=get_listing_text(data=data,
                                                         tickets_bundle=data["tickets_bundle"]),
                                   parse_mode="HTML",
                                   reply_markup=get_tickets_ikb(
                                       link=data["tickets_bundle"][data["curr_ticket"]]['gate']))







